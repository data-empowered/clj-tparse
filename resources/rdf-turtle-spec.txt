turtleDoc	::=	statement*
<statement>	::=	directive | WS* triples WS* <'.'> WSE*
<directive>	::=	prefix | base-uri
prefix ::= WS* prefixID WSE* | WS* sparqlPrefix WSE*
base-uri ::= WS* base WSE* | WS* sparqlBase WSE*
<prefixID>	::=	'@prefix' WS+ PNAME_NS WS+ IRIREF WS* <'.'>
<base>	::=	'@base' WS+ IRIREF WS+ <'.'>
<sparqlBase>	::=	'BASE' WS+ IRIREF
<sparqlPrefix>	::=	'PREFIX' WS+ PNAME_NS WS+ IRIREF
triples	::=	subject WSE+ predicateObjectList | blankNodePropertyList WSE+ predicateObjectList?
predicateObjectList	::=	verb WSE+ objectList WSE* (<';'> WSE+ (verb WS+ objectList)?)*
objectList	::=	object WSE* (<','> WSE* object)*
<verb>	::=	predicate | a
a ::= 'a'
subject	::=	iri | BlankNode | collection
predicate	::=	iri
object	::=	iri | BlankNode | collection | blankNodePropertyList | literal
literal	::=	RDFLiteral | NumericLiteral | BooleanLiteral
blankNodePropertyList	::=	<'['> WSE* predicateObjectList WSE* <']'>
collection	::=	<'('> object* <')'>
NumericLiteral	::=	INTEGER | DECIMAL | DOUBLE
RDFLiteral	::=	String (langtag | '^^' iri)?
BooleanLiteral	::=	'true' | 'false'
String	::=	STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
iri	::=	IRIREF | PrefixedName
PrefixedName	::=	PNAME_LN | PNAME_NS
BlankNode	::=	BLANK_NODE_LABEL | ANON
<EOL> ::= <#'[\n\r]+'>
<IRIREF>	::=	<'<'> (#'[^\u0000-\u0020<>\"{}|^`\\]*' | UCHAR)* <'>'>
<PNAME_NS>	::=	PN_PREFIX? ':'
<PNAME_LN>	::=	PNAME_NS PN_LOCAL
<BLANK_NODE_LABEL>	::=	'_:' (PN_CHARS_U | #'[0-9]') ((PN_CHARS | '.')* PN_CHARS)?
langtag	::=	'@' #'[a-zA-Z]+' ('-' #'[a-zA-Z0-9]+')*
<INTEGER>	::=	#'[+-]?' #'[0-9]+'
<DECIMAL>	::=	#'[+-]?' #'[0-9]*' '.' #'[0-9]+'
<DOUBLE>	::=	#'[+-]?' (#'[0-9]+' '.' #'[0-9]*' EXPONENT | '.' #'[0-9]+' EXPONENT | #'[0-9]+' EXPONENT)
<EXPONENT>	::=	#'[eE]' #'[+-]'? #'[0-9]'+
<STRING_LITERAL_QUOTE>	::=	'"' (#'[^\u0022\u005C\u000A\u000D]*' | ECHAR | UCHAR)* '"'
<STRING_LITERAL_SINGLE_QUOTE>	::=	"\'" (#'[^\u0027\u005C\u000A\u000D]*' | ECHAR | UCHAR)* "\'"
<STRING_LITERAL_LONG_SINGLE_QUOTE>	::=	"\'\'\'" (("\'" | "\'\'")? (#'[^\'\\]' | ECHAR | UCHAR))* "\'\'\'"
<STRING_LITERAL_LONG_QUOTE>	::=	'"""' (('"' | '""')? (#'[^\"\\]' | ECHAR | UCHAR))* '"""'
<UCHAR>	::=	'\\u' HEX HEX HEX HEX | '\\U' HEX HEX HEX HEX HEX HEX HEX HEX
<ECHAR>	::=     '\\u005C' #'[tbnrf"\'\\]'
<WSE>	::=     WS | EOL
<WS>	::=     <#'[ \t]*'> | <#'#.*'>
<ANON>	::=	'[' WSE* ']'
<PN_CHARS_BASE> ::=	#'[a-zA-Z]+' | #'[\u00C0-\u00D6]+' |
			#'[\u00D8-\u00F6]+'  | #'[\u00F8-\u02FF]+' |
			#'[\u0370-\u037D]+'  | #'[\u037F-\u1FFF]+' |
			#'[\u200C-\u200D]+'  | #'[\u2070-\u218F]+' |
			#'[\u2C00-\u2FEF]+'  | #'[\u3001-\uD7FF]+' |
			#'[\uF900-\uFDCF]+'  | #'[\uFDF0-\uFFFD]+' |
			#'[\x{10000}-\x{EFFFF}]+'
<PN_CHARS_U>	::=	PN_CHARS_BASE | '_'
<PN_CHARS>	::=	PN_CHARS_U | '-' | #'[0-9]' | '\\u00B7' | #'[\u0300-\u036F]' | #'[\u203F-\u2040]'
<PN_PREFIX>	::=	PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
<PN_LOCAL>	::=	(PN_CHARS_U | ':' | #'[0-9]' | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
<PLX>	::=	PERCENT | PN_LOCAL_ESC
<PERCENT>	::=	'%' HEX HEX
<HEX>	::=	#'[0-9]' | #'[A-F]' | #'[a-f]'
<PN_LOCAL_ESC>	::=	'\\u005C' ('_' | '~' | '.' | '-' | '!' | '$' | '&' | '\\u0027' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%')
